using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class planetManager : MonoBehaviour
{

    public fragment prefabFragment;
    public static fragment[] _allFragment = new fragment[1264];
    public static int countPlanetQueue = 0;

    public static int gameOn = 0;
    public static int stateFrag = 0;


    public static int[] planetGrid = new int[]
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
        0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
        0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0,
        0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
        0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
        0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
        0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
        0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
        0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
        0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
        0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
        0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
        0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
        0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
        0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0,
        0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
        0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,



    };
    public static int[] planetGrid2 = new int[]
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
        0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
        0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0,
        0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
        0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
        0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
        0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
        0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
        0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
        0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
        0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
        0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
        0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
        0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
        0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0,
        0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
        0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,



    };




    public static int[] planetGridDif = new int[]
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 1, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 1, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 1, 0, 0, 0, 0,
        0, 0, 0, 0, 1, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 1, 0, 0, 0, 0,
        0, 0, 0, 1, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 1, 0, 0, 0,
        0, 0, 1, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 1, 0, 0,
        0, 0, 1, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 2, 2, 2, 1, 0, 0,
        0, 1, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 2, 2, 2, 1, 0,
        0, 1, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 2, 2, 2, 1, 0,
        0, 1, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 2, 2, 2, 1, 0,
        0, 1, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 2, 2, 2, 1, 0,
        1, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 2, 2, 2, 1,
        1, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 2, 2, 2, 1,
        1, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 2, 2, 2, 1,
        1, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 2, 2, 2, 1,
        1, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 2, 2, 2, 1,
        1, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 2, 2, 2, 1,
        1, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 2, 2, 2, 1,
        1, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 2, 2, 2, 1,
        0, 1, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 2, 2, 2, 1, 0,
        0, 1, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 2, 2, 2, 1, 0,
        0, 1, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 2, 2, 2, 1, 0,
        0, 1, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 2, 2, 2, 1, 0,
        0, 0, 1, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 2, 2, 2, 1, 0, 0,
        0, 0, 1, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 1, 0, 0,
        0, 0, 0, 1, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 1, 0, 0, 0,
        0, 0, 0, 0, 1, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 1, 0, 0, 0, 0,
        0, 0, 0, 0, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 1, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 1, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 1, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,



    };



    private float rotationZ = 0f;

    

    private void FixedUpdate()
    {
        rotationZ -= 3f * Time.deltaTime;
        transform.rotation = Quaternion.Euler(0f, 0f, rotationZ);
    }





    private void Start()
    {
        if(saveGame.load_on == 1 && playerManager.planetD == 0)
        {
            LoadPlanet();
        }
        else
        {
            playerManager.planetD = 0;
            gameOn = 0;
            CreateNewPlanet();
            playerManager.UpdateHpFragmentStart();
        }
        
    }


    public void GenerationPlanet()
    {



        int ranP = playerManager.levelPlanet + 1;
        if (ranP > 3)
            ranP = 3;
        stateFrag = Random.Range(0, ranP);
        if (playerManager.levelPlanet == 0)
            stateFrag = 0;
        if (playerManager.levelPlanet == 1)
            stateFrag = 1;
        if (playerManager.levelPlanet == 2)
            stateFrag = 2;

        int ran = Random.Range(0,3);

        for (int i = 0; i < 1600; i++)
        {
            planetGrid[i] = planetGrid2[i];
        }


        if (ran == 0)
        {
            //creating base points
            int ran1 = Random.Range(0, 1600);
            int ran2 = Random.Range(0, 1600);
            int ran3 = Random.Range(0, 1600);
            int ran4 = Random.Range(0, 1600);
            for (int i = 0; i < 1600; i++)
            {
                if (planetGrid[i] == 1 && i == ran1)
                    planetGrid[i] = 6;
                if (planetGrid[i] == 1 && i == ran2)
                    planetGrid[i] = 6;
                if (planetGrid[i] == 1 && i == ran3)
                    planetGrid[i] = 6;
                if (planetGrid[i] == 1 && i == ran4)
                    planetGrid[i] = 6;
            }
            // enlargening from base points of mountains
            for (int r = 0; r < 3; r++)
            {
                for (int i = 0; i < 1600; i++)
                {
                    if (planetGrid[i] == 6)
                    {
                        if (Random.Range(0, 100) < 30 && planetGrid[i - 1] == 1)
                        {
                            planetGrid[i - 1] = 5;
                        }
                        if (Random.Range(0, 100) < 30 && planetGrid[i + 1] == 1)
                        {
                            planetGrid[i + 1] = 5;
                        }
                        if (i > 40 && Random.Range(0, 100) < 30 && planetGrid[i - 40] == 1)
                        {
                            planetGrid[i - 40] = 5;
                        }
                        if (i < 1560 && Random.Range(0, 100) < 30 && planetGrid[i + 40] == 1)
                        {
                            planetGrid[i + 40] = 5;
                        }
                    }
                }
                for (int i = 0; i < 1600; i++)
                {
                    if (planetGrid[i] == 5)
                    {
                        planetGrid[i] = 6;
                    }
                }
            }
            for (int i = 0; i < 1600; i++)
            {
                if (planetGrid[i] == 6)
                {
                    if (planetGrid[i - 1] == 1)
                    {
                        planetGrid[i - 1] = 4;
                    }
                    if (planetGrid[i + 1] == 1)
                    {
                        planetGrid[i + 1] = 4;
                    }
                    if (i > 40 && planetGrid[i - 40] == 1)
                    {
                        planetGrid[i - 40] = 4;
                    }
                    if (i < 1560 && planetGrid[i + 40] == 1)
                    {
                        planetGrid[i + 40] = 4;
                    }
                }
            }
            for (int r = 0; r < 2; r++)
            {
                for (int i = 0; i < 1600; i++)
                {
                    if (planetGrid[i] == 4)
                    {
                        if (planetGrid[i - 1] == 1)
                        {
                            planetGrid[i - 1] = 3;
                        }
                        if (planetGrid[i + 1] == 1)
                        {
                            planetGrid[i + 1] = 3;
                        }
                        if (i > 40 && planetGrid[i - 40] == 1)
                        {
                            planetGrid[i - 40] = 3;
                        }
                        if (i < 1560 && planetGrid[i + 40] == 1)
                        {
                            planetGrid[i + 40] = 3;
                        }
                    }
                }
                for (int i = 0; i < 1600; i++)
                {
                    if (planetGrid[i] == 3)
                    {
                        planetGrid[i] = 4;
                    }
                }
            }
            for (int i = 0; i < 1600; i++)
            {
                if (planetGrid[i] == 4)
                {
                    if (Random.Range(0, 100) < 30 && planetGrid[i - 1] == 1)
                    {
                        planetGrid[i - 1] = 3;
                    }
                    if (Random.Range(0, 100) < 30 && planetGrid[i + 1] == 1)
                    {
                        planetGrid[i + 1] = 3;
                    }
                    if (i > 40 && Random.Range(0, 100) < 30 && planetGrid[i - 40] == 1)
                    {
                        planetGrid[i - 40] = 3;
                    }
                    if (i < 1560 && Random.Range(0, 100) < 30 && planetGrid[i + 40] == 1)
                    {
                        planetGrid[i + 40] = 3;
                    }
                }
            }
            for (int i = 0; i < 1600; i++)
            {
                if (planetGrid[i] == 3)
                {
                    planetGrid[i] = 4;
                }
            }
            for (int i = 0; i < 1600; i++)
            {
                if (planetGrid[i] == 4)
                {
                    planetGrid[i] = 5;
                }
            }
            for (int i = 0; i < 1600; i++)
            {
                if (planetGrid[i] == 5)
                {
                    if (planetGrid[i - 1] == 1)
                    {
                        planetGrid[i - 1] = 4;
                    }
                    if (planetGrid[i + 1] == 1)
                    {
                        planetGrid[i + 1] = 4;
                    }
                    if (i > 40 && planetGrid[i - 40] == 1)
                    {
                        planetGrid[i - 40] = 4;
                    }
                    if (i < 1560 && planetGrid[i + 40] == 1)
                    {
                        planetGrid[i + 40] = 4;
                    }
                }
            }
            //plains
            for (int r = 0; r < 3; r++)
            {
                for (int i = 0; i < 1600; i++)
                {
                    if (planetGrid[i] == 4)
                    {
                        if (planetGrid[i - 1] == 1)
                        {
                            planetGrid[i - 1] = 3;
                        }
                        if (planetGrid[i + 1] == 1)
                        {
                            planetGrid[i + 1] = 3;
                        }
                        if (i > 40 && planetGrid[i - 40] == 1)
                        {
                            planetGrid[i - 40] = 3;
                        }
                        if (i < 1560 && planetGrid[i + 40] == 1)
                        {
                            planetGrid[i + 40] = 3;
                        }
                    }
                }
                for (int i = 0; i < 1600; i++)
                {
                    if (planetGrid[i] == 3)
                    {
                        planetGrid[i] = 4;
                    }
                }
            }
            for (int r = 0; r < 5; r++)
            {
                for (int i = 0; i < 1600; i++)
                {
                    if (planetGrid[i] == 4)
                    {
                        if (Random.Range(0, 100) < 50 && planetGrid[i - 1] == 1)
                        {
                            planetGrid[i - 1] = 3;
                        }
                        if (Random.Range(0, 100) < 50 && planetGrid[i + 1] == 1)
                        {
                            planetGrid[i + 1] = 3;
                        }
                        if (i > 40 && Random.Range(0, 100) < 50 && planetGrid[i - 40] == 1)
                        {
                            planetGrid[i - 40] = 3;
                        }
                        if (i < 1560 && Random.Range(0, 100) < 50 && planetGrid[i + 40] == 1)
                        {
                            planetGrid[i + 40] = 3;
                        }
                    }
                }
                for (int i = 0; i < 1600; i++)
                {
                    if (planetGrid[i] == 3)
                    {
                        planetGrid[i] = 4;
                    }
                }
            }
            //shores
            for (int i = 0; i < 1600; i++)
            {
                if (planetGrid[i] == 4)
                {
                    if (planetGrid[i - 1] == 1)
                    {
                        planetGrid[i] = 3;
                    }
                    if (planetGrid[i + 1] == 1)
                    {
                        planetGrid[i] = 3;
                    }
                    if (i > 40 && planetGrid[i - 40] == 1)
                    {
                        planetGrid[i] = 3;
                    }
                    if (i < 1560 && planetGrid[i + 40] == 1)
                    {
                        planetGrid[i] = 3;
                    }
                }
            }
        }
        if (ran == 1)
        {
            // creating base points
            int ran1 = Random.Range(0, 1600);
            int ran2 = Random.Range(0, 1600);
            int ran3 = Random.Range(0, 1600);
            int ran4 = Random.Range(0, 1600);
            int ran5 = Random.Range(0, 1600);
            int ran6 = Random.Range(0, 1600);
            int ran7 = Random.Range(0, 1600);
            for (int i = 0; i < 1600; i++)
            {
                if (planetGrid[i] == 1 && i == ran1)
                    planetGrid[i] = 6;
                if (planetGrid[i] == 1 && i == ran2)
                    planetGrid[i] = 6;
                if (planetGrid[i] == 1 && i == ran3)
                    planetGrid[i] = 6;
                if (planetGrid[i] == 1 && i == ran4)
                    planetGrid[i] = 6;
                if (planetGrid[i] == 1 && i == ran5)
                    planetGrid[i] = 6;
                if (planetGrid[i] == 1 && i == ran6)
                    planetGrid[i] = 6;
                if (planetGrid[i] == 1 && i == ran7)
                    planetGrid[i] = 6;
            }
            //enlargening from base points of mountains
            for (int r = 0; r < 4; r++)
            {
                for (int i = 0; i < 1600; i++)
                {
                    if (planetGrid[i] == 6)
                    {
                        if (Random.Range(0, 100) < 30 && planetGrid[i - 1] == 1)
                        {
                            planetGrid[i - 1] = 5;
                        }
                        if (Random.Range(0, 100) < 30 && planetGrid[i + 1] == 1)
                        {
                            planetGrid[i + 1] = 5;
                        }
                        if (i > 40 && Random.Range(0, 100) < 30 && planetGrid[i - 40] == 1)
                        {
                            planetGrid[i - 40] = 5;
                        }
                        if (i < 1560 && Random.Range(0, 100) < 30 && planetGrid[i + 40] == 1)
                        {
                            planetGrid[i + 40] = 5;
                        }
                    }
                }
                for (int i = 0; i < 1600; i++)
                {
                    if (planetGrid[i] == 5)
                    {
                        planetGrid[i] = 6;
                    }
                }
            }
            for (int i = 0; i < 1600; i++)
            {
                if (planetGrid[i] == 6)
                {
                    if (planetGrid[i - 1] == 1)
                    {
                        planetGrid[i - 1] = 4;
                    }
                    if (planetGrid[i + 1] == 1)
                    {
                        planetGrid[i + 1] = 4;
                    }
                    if (i > 40 && planetGrid[i - 40] == 1)
                    {
                        planetGrid[i - 40] = 4;
                    }
                    if (i < 1560 && planetGrid[i + 40] == 1)
                    {
                        planetGrid[i + 40] = 4;
                    }
                }
            }
            for (int r = 0; r < 3; r++)
            {
                for (int i = 0; i < 1600; i++)
                {
                    if (planetGrid[i] == 4)
                    {
                        if (planetGrid[i - 1] == 1)
                        {
                            planetGrid[i - 1] = 3;
                        }
                        if (planetGrid[i + 1] == 1)
                        {
                            planetGrid[i + 1] = 3;
                        }
                        if (i > 40 && planetGrid[i - 40] == 1)
                        {
                            planetGrid[i - 40] = 3;
                        }
                        if (i < 1560 && planetGrid[i + 40] == 1)
                        {
                            planetGrid[i + 40] = 3;
                        }
                    }
                }
                for (int i = 0; i < 1600; i++)
                {
                    if (planetGrid[i] == 3)
                    {
                        planetGrid[i] = 4;
                    }
                }
            }
            for (int i = 0; i < 1600; i++)
            {
                if (planetGrid[i] == 4)
                {
                    if (Random.Range(0, 100) < 30 && planetGrid[i - 1] == 1)
                    {
                        planetGrid[i - 1] = 3;
                    }
                    if (Random.Range(0, 100) < 30 && planetGrid[i + 1] == 1)
                    {
                        planetGrid[i + 1] = 3;
                    }
                    if (i > 40 && Random.Range(0, 100) < 30 && planetGrid[i - 40] == 1)
                    {
                        planetGrid[i - 40] = 3;
                    }
                    if (i < 1560 && Random.Range(0, 100) < 30 && planetGrid[i + 40] == 1)
                    {
                        planetGrid[i + 40] = 3;
                    }
                }
            }
            for (int i = 0; i < 1600; i++)
            {
                if (planetGrid[i] == 3)
                {
                    planetGrid[i] = 4;
                }
            }
            for (int i = 0; i < 1600; i++)
            {
                if (planetGrid[i] == 4)
                {
                    planetGrid[i] = 5;
                }
            }
            for (int i = 0; i < 1600; i++)
            {
                if (planetGrid[i] == 5)
                {
                    if (planetGrid[i - 1] == 1)
                    {
                        planetGrid[i - 1] = 4;
                    }
                    if (planetGrid[i + 1] == 1)
                    {
                        planetGrid[i + 1] = 4;
                    }
                    if (i > 40 && planetGrid[i - 40] == 1)
                    {
                        planetGrid[i - 40] = 4;
                    }
                    if (i < 1560 && planetGrid[i + 40] == 1)
                    {
                        planetGrid[i + 40] = 4;
                    }
                }
            }
            //plains
            for (int r = 0; r < 3; r++)
            {
                for (int i = 0; i < 1600; i++)
                {
                    if (planetGrid[i] == 4)
                    {
                        if (planetGrid[i - 1] == 1)
                        {
                            planetGrid[i - 1] = 3;
                        }
                        if (planetGrid[i + 1] == 1)
                        {
                            planetGrid[i + 1] = 3;
                        }
                        if (i > 40 && planetGrid[i - 40] == 1)
                        {
                            planetGrid[i - 40] = 3;
                        }
                        if (i < 1560 && planetGrid[i + 40] == 1)
                        {
                            planetGrid[i + 40] = 3;
                        }
                    }
                }
                for (int i = 0; i < 1600; i++)
                {
                    if (planetGrid[i] == 3)
                    {
                        planetGrid[i] = 4;
                    }
                }
            }
            for (int r = 0; r < 3; r++)
            {
                for (int i = 0; i < 1600; i++)
                {
                    if (planetGrid[i] == 4)
                    {
                        if (Random.Range(0, 100) < 50 && planetGrid[i - 1] == 1)
                        {
                            planetGrid[i - 1] = 3;
                        }
                        if (Random.Range(0, 100) < 50 && planetGrid[i + 1] == 1)
                        {
                            planetGrid[i + 1] = 3;
                        }
                        if (i > 40 && Random.Range(0, 100) < 50 && planetGrid[i - 40] == 1)
                        {
                            planetGrid[i - 40] = 3;
                        }
                        if (i < 1560 && Random.Range(0, 100) < 50 && planetGrid[i + 40] == 1)
                        {
                            planetGrid[i + 40] = 3;
                        }
                    }
                }
                for (int i = 0; i < 1600; i++)
                {
                    if (planetGrid[i] == 3)
                    {
                        planetGrid[i] = 4;
                    }
                }
            }
            //shores
            for (int i = 0; i < 1600; i++)
            {
                if (planetGrid[i] == 4)
                {
                    if (planetGrid[i - 1] == 1)
                    {
                        planetGrid[i] = 3;
                    }
                    if (planetGrid[i + 1] == 1)
                    {
                        planetGrid[i] = 3;
                    }
                    if (i > 40 && planetGrid[i - 40] == 1)
                    {
                        planetGrid[i] = 3;
                    }
                    if (i < 1560 && planetGrid[i + 40] == 1)
                    {
                        planetGrid[i] = 3;
                    }
                }
            }
        }
        if (ran == 2)
        {
            //creating base points
            int ran1 = Random.Range(0, 1600);
            int ran2 = Random.Range(0, 1600);
            int ran3 = Random.Range(0, 1600);
            int ran4 = Random.Range(0, 1600);
            int ran5 = Random.Range(0, 1600);
            int ran6 = Random.Range(0, 1600);
            int ran7 = Random.Range(0, 1600);
            int ran8 = Random.Range(0, 1600);
            for (int i = 0; i < 1600; i++)
            {
                if (planetGrid[i] == 1 && i == ran1)
                    planetGrid[i] = 6;
                if (planetGrid[i] == 1 && i == ran2)
                    planetGrid[i] = 6;
                if (planetGrid[i] == 1 && i == ran3)
                    planetGrid[i] = 6;
                if (planetGrid[i] == 1 && i == ran4)
                    planetGrid[i] = 6;
                if (planetGrid[i] == 1 && i == ran5)
                    planetGrid[i] = 6;
                if (planetGrid[i] == 1 && i == ran6)
                    planetGrid[i] = 6;
                if (planetGrid[i] == 1 && i == ran7)
                    planetGrid[i] = 6;
                if (planetGrid[i] == 1 && i == ran8)
                    planetGrid[i] = 6;
            }
            //enlargening from base points of mountains
            for (int r = 0; r < 3; r++)
            {
                for (int i = 0; i < 1600; i++)
                {
                    if (planetGrid[i] == 6)
                    {
                        if (Random.Range(0, 100) < 30 && planetGrid[i - 1] == 1)
                        {
                            planetGrid[i - 1] = 5;
                        }
                        if (Random.Range(0, 100) < 30 && planetGrid[i + 1] == 1)
                        {
                            planetGrid[i + 1] = 5;
                        }
                        if (i > 40 && Random.Range(0, 100) < 30 && planetGrid[i - 40] == 1)
                        {
                            planetGrid[i - 40] = 5;
                        }
                        if (i < 1560 && Random.Range(0, 100) < 30 && planetGrid[i + 40] == 1)
                        {
                            planetGrid[i + 40] = 5;
                        }
                    }
                }
                for (int i = 0; i < 1600; i++)
                {
                    if (planetGrid[i] == 5)
                    {
                        planetGrid[i] = 6;
                    }
                }
            }
            for (int i = 0; i < 1600; i++)
            {
                if (planetGrid[i] == 6)
                {
                    if (planetGrid[i - 1] == 1)
                    {
                        planetGrid[i - 1] = 4;
                    }
                    if (planetGrid[i + 1] == 1)
                    {
                        planetGrid[i + 1] = 4;
                    }
                    if (i > 40 && planetGrid[i - 40] == 1)
                    {
                        planetGrid[i - 40] = 4;
                    }
                    if (i < 1560 && planetGrid[i + 40] == 1)
                    {
                        planetGrid[i + 40] = 4;
                    }
                }
            }
            for (int r = 0; r < 2; r++)
            {
                for (int i = 0; i < 1600; i++)
                {
                    if (planetGrid[i] == 4)
                    {
                        if (planetGrid[i - 1] == 1)
                        {
                            planetGrid[i - 1] = 3;
                        }
                        if (planetGrid[i + 1] == 1)
                        {
                            planetGrid[i + 1] = 3;
                        }
                        if (i > 40 && planetGrid[i - 40] == 1)
                        {
                            planetGrid[i - 40] = 3;
                        }
                        if (i < 1560 && planetGrid[i + 40] == 1)
                        {
                            planetGrid[i + 40] = 3;
                        }
                    }
                }
                for (int i = 0; i < 1600; i++)
                {
                    if (planetGrid[i] == 3)
                    {
                        planetGrid[i] = 4;
                    }
                }
            }
            for (int i = 0; i < 1600; i++)
            {
                if (planetGrid[i] == 4)
                {
                    if (Random.Range(0, 100) < 30 && planetGrid[i - 1] == 1)
                    {
                        planetGrid[i - 1] = 3;
                    }
                    if (Random.Range(0, 100) < 30 && planetGrid[i + 1] == 1)
                    {
                        planetGrid[i + 1] = 3;
                    }
                    if (i > 40 && Random.Range(0, 100) < 30 && planetGrid[i - 40] == 1)
                    {
                        planetGrid[i - 40] = 3;
                    }
                    if (i < 1560 && Random.Range(0, 100) < 30 && planetGrid[i + 40] == 1)
                    {
                        planetGrid[i + 40] = 3;
                    }
                }
            }
            for (int i = 0; i < 1600; i++)
            {
                if (planetGrid[i] == 3)
                {
                    planetGrid[i] = 4;
                }
            }
            for (int i = 0; i < 1600; i++)
            {
                if (planetGrid[i] == 4)
                {
                    planetGrid[i] = 5;
                }
            }
            for (int i = 0; i < 1600; i++)
            {
                if (planetGrid[i] == 5)
                {
                    if (planetGrid[i - 1] == 1)
                    {
                        planetGrid[i - 1] = 4;
                    }
                    if (planetGrid[i + 1] == 1)
                    {
                        planetGrid[i + 1] = 4;
                    }
                    if (i > 40 && planetGrid[i - 40] == 1)
                    {
                        planetGrid[i - 40] = 4;
                    }
                    if (i < 1560 && planetGrid[i + 40] == 1)
                    {
                        planetGrid[i + 40] = 4;
                    }
                }
            }
            //plains
            for (int r = 0; r < 2; r++)
            {
                for (int i = 0; i < 1600; i++)
                {
                    if (planetGrid[i] == 4)
                    {
                        if (planetGrid[i - 1] == 1)
                        {
                            planetGrid[i - 1] = 3;
                        }
                        if (planetGrid[i + 1] == 1)
                        {
                            planetGrid[i + 1] = 3;
                        }
                        if (i > 40 && planetGrid[i - 40] == 1)
                        {
                            planetGrid[i - 40] = 3;
                        }
                        if (i < 1560 && planetGrid[i + 40] == 1)
                        {
                            planetGrid[i + 40] = 3;
                        }
                    }
                }
                for (int i = 0; i < 1600; i++)
                {
                    if (planetGrid[i] == 3)
                    {
                        planetGrid[i] = 4;
                    }
                }
            }
            for (int r = 0; r < 2; r++)
            {
                for (int i = 0; i < 1600; i++)
                {
                    if (planetGrid[i] == 4)
                    {
                        if (Random.Range(0, 100) < 50 && planetGrid[i - 1] == 1)
                        {
                            planetGrid[i - 1] = 3;
                        }
                        if (Random.Range(0, 100) < 50 && planetGrid[i + 1] == 1)
                        {
                            planetGrid[i + 1] = 3;
                        }
                        if (i > 40 && Random.Range(0, 100) < 50 && planetGrid[i - 40] == 1)
                        {
                            planetGrid[i - 40] = 3;
                        }
                        if (i < 1560 && Random.Range(0, 100) < 50 && planetGrid[i + 40] == 1)
                        {
                            planetGrid[i + 40] = 3;
                        }
                    }
                }
                for (int i = 0; i < 1600; i++)
                {
                    if (planetGrid[i] == 3)
                    {
                        planetGrid[i] = 4;
                    }
                }
            }
            //shores
            for (int i = 0; i < 1600; i++)
            {
                if (planetGrid[i] == 4)
                {
                    if (planetGrid[i - 1] == 1)
                    {
                        planetGrid[i] = 3;
                    }
                    if (planetGrid[i + 1] == 1)
                    {
                        planetGrid[i] = 3;
                    }
                    if (i > 40 && planetGrid[i - 40] == 1)
                    {
                        planetGrid[i] = 3;
                    }
                    if (i < 1560 && planetGrid[i + 40] == 1)
                    {
                        planetGrid[i] = 3;
                    }
                }
            }
        }



    }


    public void PlanetDestruction()
    {
        for (int i = 0; i < 1264; i++)
        {
            if (_allFragment[i].isActiveAndEnabled == true)
            {
                _allFragment[i].PlanetDeathAnimation();
            }
        }
    }

    public void CreateNewPlanet()
    {
        countPlanetQueue = 0;
        GenerationPlanet();
        if (gameOn == 0)
        {
            for (int i = 0; i < 1264; i++)
            {
                _allFragment[i] = Instantiate(prefabFragment, this.transform);
                _allFragment[i].number = i;
                _allFragment[i].StartFragment();
            }
            playerManager.fragentAmount = 1138;
            gameOn = 1;
        }
        else
        {
            for (int i = 0; i < 1264; i++)
            {
                _allFragment[i].gameObject.SetActive(true);
                _allFragment[i].PlanetAnimationEnd();
            }
            playerManager.fragentAmount = 1138;
        }
        
    }




    public void LoadPlanet()
    {
        GenerationPlanet();
        for (int i = 0; i < 1264; i++)
        {
            _allFragment[i] = Instantiate(prefabFragment, this.transform);
            _allFragment[i].number = i;
            _allFragment[i].StartFragment();
        }
        for (int i = 0; i < 1264; i++)
        {
            if (playerManager.fragmentHp[i] <= 0)
            {
                _allFragment[i].gameObject.SetActive(false);
            }
        }
        
        gameOn = 1;
    }



}
